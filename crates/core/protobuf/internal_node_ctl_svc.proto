// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

import "restate/cluster.proto";

package restate.internal_node_ctl_svc;

// Internal node control service for sensitive operations that must not be exposed
// through load balancers to prevent split-brain situations.
service InternalNodeCtlSvc {
  // Provision the Restate cluster on this node.
  // This method is critical and must not be load balanced to prevent split-brain situations.
  rpc ProvisionCluster(ProvisionClusterRequest)
      returns (ProvisionClusterResponse);
}

message ProvisionClusterRequest {
  bool dry_run = 1;
  // if unset then the configured cluster num partitions will be used
  optional uint32 num_partitions = 2;
  // if unset partition replication will default to
  // `admin.default-partition-replication`. Otherwise it's limited to the
  // provided replication property
  optional restate.cluster.ReplicationProperty partition_replication = 3;
  // if unset then the configured cluster default log provider will be used
  optional string log_provider = 4;
  // only used if provider = "replicated"
  // if unset then the configured cluster default log replication will be used
  optional restate.cluster.ReplicationProperty log_replication = 5;
  // only used if provider = "replicated"
  // if unset then the configured cluster default target nodeset size will be
  // used
  optional uint32 target_nodeset_size = 6;
}

message ProvisionClusterResponse {
  bool dry_run = 1;
  restate.cluster.ClusterConfiguration cluster_configuration = 2;
}