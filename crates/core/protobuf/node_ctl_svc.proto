// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

import "google/protobuf/empty.proto";
import "restate/common.proto";

package restate.node_ctl_svc;

service NodeCtlSvc {
  // Get identity information from this node.
  rpc GetIdent(google.protobuf.Empty) returns (IdentResponse);

  // Get metadata given the metadata kind
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse);

  // Returns the cluster health from the point of view of this node.
  rpc ClusterHealth(google.protobuf.Empty) returns (ClusterHealthResponse);
}

message IdentResponse {
  restate.common.NodeStatus status = 1;
  // node id may be unset if the node hasn't yet joined a cluster
  optional restate.common.NodeId node_id = 2;
  string cluster_name = 3;
  // indicates which roles are enabled on this node
  repeated string roles = 4;
  // Age of the running node in seconds (how many seconds since the daemon
  // started)
  uint64 age_s = 5;
  restate.common.AdminStatus admin_status = 6;
  restate.common.WorkerStatus worker_status = 7;
  restate.common.LogServerStatus log_server_status = 8;
  restate.common.MetadataServerStatus metadata_server_status = 9;
  uint32 nodes_config_version = 10;
  uint32 logs_version = 11;
  uint32 schema_version = 12;
  uint32 partition_table_version = 13;
}

message GetMetadataRequest {
  reserved 1;
  restate.common.MetadataKind kind = 2;
}

message GetMetadataResponse {
  // polymorphic. The value depends on the MetadataKind requested
  bytes encoded = 1;
}

message ClusterHealthResponse {
  string cluster_name = 1;
  // Some value if the cluster has been configured to use the embedded metadata
  // store
  optional EmbeddedMetadataClusterHealth metadata_cluster_health = 2;
}

message EmbeddedMetadataClusterHealth {
  repeated restate.common.NodeId members = 1;
}
